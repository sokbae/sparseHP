source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/lib_sparseHP.R')
# Estimate L2/L0-constrained filtering
l0_results = l0tfc_update(new_y=ly,l0constraint=l0constraint,M=M,l2penalty=l2penalty, yhat=data$filter_yhat)
l0_obj = l0_results$objval
l0_est = l0_results$x
betaHat = l0_est[1:length(ly)]
zHat = l0_est[(length(ly)+1):length(l0_est)]
SHP_kink_dates = date[zHat==1] + 1          # Double difference makes one lag. Should add 1 more day
cat('\n\n Kink dates: \n')
cat('---------------------------------------------------------------- \n')
print(SHP_kink_dates)
zHat
l0_est
data$filter_yhat
old_T
new_T
# Estimate L2/L0-constrained filtering
l0_results = l0tfc_update(new_y=ly[old_T+1:new_T],l0constraint=l0constraint,M=M,l2penalty=l2penalty, yhat=data$filter_yhat)
ly[old_T+1:new_T]
ly
# Estimate L2/L0-constrained filtering
l0_results = l0tfc_update(new_y=ly[(old_T+1):new_T],l0constraint=l0constraint,M=M,l2penalty=l2penalty, yhat=data$filter_yhat)
l0_obj = l0_results$objval
l0_est = l0_results$x
l0_est
new_T
data$filter_yhat
length(ly[(old_T+1):new_T])
T_old
old_T
length(data$date)
length(data$filter_yhat)
length(ly)
# Input from the old estimates
old_T = length(data$filter_yhat)
new_T = length(ly)
old_T
new_T
l0_est
# Estimate L2/L0-constrained filtering
new_ly = ly[(old_T+1):new_T]
l0_results = l0tfc_update(new_y=new_ly,l0constraint=l0constraint,M=M,l2penalty=l2penalty, yhat=data$filter_yhat)
l0_obj = l0_results$objval
l0_est = l0_results$x
l0_est
betaHat = l0_est[(1+2):length(new_ly)]  # Drop the first two periods (it's from the last estimation)
zHat = l0_est[(length(new_ly)+1+2):length(l0_est)]
betaHat
zHat
date
new_date = date[(old_T+1):new_T]
new_date
SHP_kink_dates = new_date[zHat==1] + 1          # Double difference makes one lag. Should add 1 more day
print(SHP_kink_dates)
data
str(data)
plot.ts(ly)
plot.ts(R)
c(data$filter_yhat, filter_yhat)
filter_yhat   = betaHat
filter_resid  = ly - betaHat
filter_Rhat   = exp(betaHat)/ghat
filter_Rresid = R - filter_Rhat
ly
filter_yhat   = c(data$filter_yhat,   betaHat)
plot.ts(filter_yhat)
filter_resid  = ly - betaHat
length(ly)
length(betaHat)
filter_resid  = ly - filter_yhat
filter_yhat   = c(data$filter_yhat,   betaHat)
filter_resid  = ly - filter_yhat
length(flter_yhat)
length(filter_yhat)
length(ly)
length(betaHat)
length(l_est)
length(l0_est)
length(new_ly)
betaHat = l0_est[(1+2):(length(new_ly)+2)]  # Drop the first two periods (it's from the last estimation)
zHat = l0_est[(length(new_ly)+1+2):length(l0_est)]
new_date = date[(old_T+1):new_T]
SHP_kink_dates = new_date[zHat==1] + 1          # Double difference makes one lag. Should add 1 more day
cat('\n\n Kink dates: \n')
cat('---------------------------------------------------------------- \n')
print(SHP_kink_dates)
cat('---------------------------------------------------------------- \n')
cat('\n\n \n')
SHP_kink_dates=c(SHP_kink_dates)
filter_yhat   = c(data$filter_yhat,   betaHat)
filter_resid  = ly - filter_yhat
filter_Rhat   = c(data$filter_Rhat,  exp(betaHat)/ghat)
filter_Rresid = R - filter_Rhat
fidelity      = sum(filter_resid^2)
cat('---------------------------------------------------------------- \n')
cat('\n\n fidelity : ',fidelity,'\n' )
new_data = data.frame(
date,
lockdown_date,
R,            # R_t original scale
ly,           # log(Y_t) = beta_t
# linear fit reulsts
lyhat,        # fitted value of linear reg, log scale
lRhat,        # fitted value of linear reg, R_t scale
lresid,       # residual of linear fit, log scale
lRresid,      # residual of linear fit, R_t scale
# filtering results
filter_yhat = c(data$filter_yhat, filter_yhat),  # fitted value, log scale
filter_Rhat,  # fitted value, R_t scale
filter_resid, # residuals, log scale
filter_Rresid # residuals, R_t scale
#kinks         # kink dates
)
str(new_data)
length(date)
new_data = data.frame(
date,
lockdown_date,
R,            # R_t original scale
ly,           # log(Y_t) = beta_t
# linear fit reulsts
lyhat,        # fitted value of linear reg, log scale
lRhat,        # fitted value of linear reg, R_t scale
lresid,       # residual of linear fit, log scale
lRresid,      # residual of linear fit, R_t scale
# filtering results
filter_yhat,  # fitted value, log scale
filter_Rhat,  # fitted value, R_t scale
filter_resid, # residuals, log scale
filter_Rresid # residuals, R_t scale
#kinks         # kink dates
)
draw_fit_R0(new_data, country.name, file_name)
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
file_name
sink()
sink()
sink()
file_name
country.name
file_name
draw_fit_beta(data, country.name, file_name)
kink_date
SHP_kink_dates
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
SHP_kink_dates
sink()
sink()
SHP_kink_dates
new_SHP_kink_dates
data$SHP_kink_dates
SHP_kink_dates
str(data)
######################################################
### load data                                      ###
######################################################
# Old estimation results
load(paste0("../results/SparseHP_",country.name,"_",old.final.date,".RData"))
SHP_kink_dates
SHP_kink_dates=c(SHP_kink_dates,  new_SHP_kink_dates)
draw_fit_beta(new_data, SHP_kink_dates, country.name, file_name)
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
draw_resid_R0(new_data, SHP_kink_dates, country.name, file_name)
SHP_kink_dates
sink()
sink()
SHP_kink_dates
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/lib_sparseHP.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/lib_sparseHP.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
new_date
sink()
sink()
new_Date
new_date
zHat
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_Canada_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-07-18.R')
getwd()
sink()
snk()
sink()
getwd()
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-07-18.R')
sink()
sink(0)
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-06-08.R')
date
length(zHat)
length(date)
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_US_2020-07-18.R')
date
length(date)
length(new_date)
length(zHat)
BetaData$date
rm(list=ls())   # initialization
library(ggplot2)
library(quantreg)
library(pracma)
library(CVXR)
library(gurobi)
library(moments)
library(viridis)
library(doMC)
library(parallel)
n_cores = detectCores()
registerDoMC(cores=n_cores)
source('lib_sparseHP.R')
country.name = "US"     # The country name should match with the one in the 'coronavirus' R package
final.date = "2020-06-08"           # Fianl date of the data: "YYYY-MM-DD". Default is today
if (is.null(final.date)) final.date=Sys.Date()
Np = 328200000          # total population in US
min_cum_case = 100      # The first date of the analysis begins when the number of cumulative cases reaches 100
lockdown = "2020-03-30" # March 30th: 30 statewide stay-at-home orders
ghat = 1/18             # gamma
bwl = 3                 # backward window length for moving average
output_file_name = paste0("../results/",country.name,"_",final.date,".out")
sink()
#df = data_extract(country.name, final.date)
df = read.csv(paste0("../data/covid_",country.name,"_2020-06-08.csv"))
BetaData = gen_vars(date=as.Date(df$date),
confirmed=df$confirmed,
death=df$death,
recovered=df$recovered,
population=Np,
min_cum_case=min_cum_case)
BetaData$date
head(BetaData)
country.name = "US"     # The country name should match with the one in the 'coronavirus' R package
final.date = "2020-07-18"   # Final date of the data: "YYYY-MM-DD". Default is today
old.final.date = "2020-06-08"   # End date of the previous analysis. We update after this date.
if (is.null(final.date)) final.date=Sys.Date()
Np = 328200000          # total population in US
min_cum_case = 100      # The first date of the analysis begins when the number of cumulative cases reaches 100
lockdown = "2020-03-30" # March 30th: 30 statewide stay-at-home orders
ghat = 1/18             # gamma
bwl = 3                 # backward window length for moving average
output_file_name = paste0("../results/",country.name,"_",final.date,".out")
sink(output_file_name)
sink()
sink()
######################################################
### load data                                      ###
######################################################
# Old estimation results
load(paste0("../results/SparseHP_",country.name,"_",old.final.date,".RData"))
data$date
#df = data_extract(country.name, final.date)
df = read.csv(paste0("../data/covid_",country.name,"_",final.date,".csv"))
df$date
BetaData = gen_vars(date=as.Date(df$date),
confirmed=df$confirmed,
death=df$death,
recovered=df$recovered,
population=Np,
min_cum_case=min_cum_case)
head(BetaData)
head(df)
df
final.date = "2020-06-08"           # Fianl date of the data: "YYYY-MM-DD". Default is today
#df = data_extract(country.name, final.date)
df = read.csv(paste0("../data/covid_",country.name,"_2020-06-08.csv"))
df
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-06-08.R')
setwd("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Experiments/src")
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-07-18.R')
Y==0
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-07-18.R')
ly
sin()
sink()
sink()
sink()
ly
Y==0
Y[Y==0] = 1e-06
Y==0
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_China_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_UK_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_UK_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_UK_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-06-08.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-07-18.R')
sink()
sink()
sink()
sink()
getwd()
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-07-18.R')
source('~/Dropbox/0_Current/LLSS-Covid19/Codes_Experiments/src/SIR_filtering_South_Korea_2020-07-18.R')
getwd()
sink()
sink()
sink()
getwd()
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_filtering_South_Korea_2020-07-18.R')
sink()
sink()
getwd(
)
final.date = "2020-07-18"   # Final date of the data: "YYYY-MM-DD". Default is today
#df = data_extract(country.name, final.date)
df = read.csv(paste0("../data/covid_",country.name,"_",final.date,".csv"))
head(df)
df
df = read.csv(paste0("data/covid_",country.name,"_2020-06-08_revised.csv"))
country.name = "US"     # The country name should match with the one in the 'coronavirus' R package
#df = data_extract(country.name, final.date)
df = read.csv(paste0("data/covid_",country.name,"_2020-06-08_revised.csv"))
#df = data_extract(country.name, final.date)
df = read.csv(paste0("../data/covid_",country.name,"_2020-06-08_revised.csv"))
df
BetaData = gen_vars(date=as.Date(df$date),
confirmed=df$confirmed,
death=df$death,
recovered=df$recovered,
population=Np,
min_cum_case=min_cum_case)
BetaData
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_filtering_US_2020-06-08_revised_CV2.R')
getwd()
setwd("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src")
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_first_look_US_2020-06-08.R')
getwd()
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_first_look_US_2020-06-08_revised.R')
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_US_2020-06-08_revised.R')
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_US_2020-06-08_revised.R')
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/run2.R')
getwd(0)
getwd(0)
getwd()
sink()
sink()
getwd()
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/run2.R')
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_filtering_US_2020-06-08_revised_more_graphs.R')
rm(list=ls())   # initialization
library(ggplot2)
library(quantreg)
library(pracma)
library(CVXR)
library(gurobi)
library(moments)
library(viridis)
library(doMC)
library(parallel)
n_cores = detectCores()
#registerDoMC(cores=n_cores)
registerDoMC(cores=5)
source('lib_sparseHP.R')
country.name = "UK"     # The country name should match with the one in the 'coronavirus' R package
final.date = "2020-06-08"   # Fianl date of the data: "YYYY-MM-DD". Default is today
if (is.null(final.date)) final.date=Sys.Date()
Np = 328200000          # total population in US
min_cum_case = 100      # The first date of the analysis begins when the number of cumulative cases reaches 100
lockdown = "2020-03-24" # March 24th: Lockdown measures begin
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/src/SIR_filtering_UK_2020-06-08_revised.R')
Np
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph_revised.pdf"), width=5, height=5, units="in")
load("/home/yshin/Dropbox/0_Shared/LLSS-Covid19/Codes_Online_Update/results/SparseHP_China_2020-06-08.RData")
load("/home/yshin/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_China_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
getwd()
ggsave(paste0('../results/',cv_file_name,"_Graph_revised.pdf"), width=5, height=5, units="in")
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width=5, height=5, units="in")
cv_file_name
load("/home/yshin/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_South Korea_2020-06-08_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width=5, height=5, units="in")
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_UK_2020-06-08.R')
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_UK_2020-06-08.R')
setwd("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public")
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_China_2020-06-08.R')
setwd("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src")
source('~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/src/SIR_filtering_China_2020-06-08.R')
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
load("/home/yshin/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_UK_2020-06-08_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
load("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_South_Korea_2020-06-08_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
load("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_Canada_2020-06-08_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
load("~/Dropbox/0_Shared/LLSS-Covid19/Codes_Public/results/SparseHP_US_2020-06-08_CV.RData")
# draw the cross-validation result graph
result[,2] = as.factor(result[,2])
f = ggplot(data=result, aes(x=l2, y=obj_val, group=l0, color=l0) ) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste0(country.name, ": Leave-one-out Cross-validation")) +
ylab("Objective Function") +
xlab(bquote(lambda)) +
theme(axis.title = element_text(size = 15)) +
guides(color=guide_legend(title=bquote(kappa))) +
theme(legend.title = element_text(size=14)) +
#scale_x_continuous(trans = "log2", breaks=c(0.125,0.25,0.5,1,2,4,8,16,32)) +
scale_x_continuous(trans = "log2") +
geom_vline(xintercept = min_l2_l0$l2, linetype="dashed", color="red")
print(f)
ggsave(paste0('../results/',cv_file_name,"_Graph.pdf"), width = 5, height = 5, units = "in")
